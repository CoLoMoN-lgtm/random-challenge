// src/utils/firestore.js
import { 
  collection, 
  doc, 
  getDoc, 
  setDoc, 
  updateDoc, 
  arrayUnion, 
  arrayRemove,
  enableNetwork,
  disableNetwork,
  getDocFromCache,
  getDocFromServer
} from 'firebase/firestore';
import { db, checkOnlineStatus } from '../firebase';

// –õ–æ–∫–∞–ª—å–Ω–∏–π –∫–µ—à –¥–ª—è –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º—É
const localCache = {
  completedChallenges: new Map(),
  userProfiles: new Map()
};

// –ó–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ
const saveToLocalStorage = (key, data) => {
  try {
    localStorage.setItem(key, JSON.stringify(data));
  } catch (error) {
    console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –≤ localStorage:', error);
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
const getFromLocalStorage = (key, defaultValue = null) => {
  try {
    const item = localStorage.getItem(key);
    return item ? JSON.parse(item) : defaultValue;
  } catch (error) {
    console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –∑ localStorage:', error);
    return defaultValue;
  }
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ —á–µ–ª–µ–Ω–¥–∂—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const getCompletedChallenges = async (userId) => {
  try {
    if (!userId) {
      throw new Error('User ID is required');
    }

    const cacheKey = `completedChallenges_${userId}`;
    
    // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–µ—à
    if (localCache.completedChallenges.has(userId)) {
      return localCache.completedChallenges.get(userId);
    }

    const userDocRef = doc(db, 'users', userId);
    let userDocSnap;
    
    if (checkOnlineStatus()) {
      try {
        // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞
        userDocSnap = await getDocFromServer(userDocRef);
      } catch (serverError) {
        console.log('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à');
        userDocSnap = await getDocFromCache(userDocRef);
      }
    } else {
      // –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à
      userDocSnap = await getDocFromCache(userDocRef);
    }
    
    if (userDocSnap.exists()) {
      const userData = userDocSnap.data();
      const completedChallenges = userData.completedChallenges || [];
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∫–µ—à—ñ
      localCache.completedChallenges.set(userId, completedChallenges);
      saveToLocalStorage(cacheKey, completedChallenges);
      
      return completedChallenges;
    } else {
      // –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —ñ—Å–Ω—É—î - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage
      const cached = getFromLocalStorage(cacheKey, []);
      localCache.completedChallenges.set(userId, cached);
      
      // –Ø–∫—â–æ –æ–Ω–ª–∞–π–Ω, —Å—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç
      if (checkOnlineStatus()) {
        try {
          await setDoc(userDocRef, {
            completedChallenges: cached,
            createdAt: new Date(),
            lastActivity: new Date()
          });
        } catch (createError) {
          console.log('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', createError);
        }
      }
      
      return cached;
    }
  } catch (error) {
    console.error('Error getting completed challenges:', error);
    
    // –§–æ–ª–±–µ–∫ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ localStorage
    const cacheKey = `completedChallenges_${userId}`;
    const cached = getFromLocalStorage(cacheKey, []);
    localCache.completedChallenges.set(userId, cached);
    
    return cached;
  }
};

// –î–æ–¥–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–∏–π —á–µ–ª–µ–Ω–¥–∂ –¥–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const addCompletedChallenge = async (userId, challengeId) => {
  try {
    if (!userId || !challengeId) {
      throw new Error('User ID and Challenge ID are required');
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–µ—à –æ–¥—Ä–∞–∑—É –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –≤—ñ–¥–≥—É–∫—É UI
    const currentChallenges = localCache.completedChallenges.get(userId) || [];
    if (!currentChallenges.includes(challengeId)) {
      const updatedChallenges = [...currentChallenges, challengeId];
      localCache.completedChallenges.set(userId, updatedChallenges);
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
      const cacheKey = `completedChallenges_${userId}`;
      saveToLocalStorage(cacheKey, updatedChallenges);
    }

    // –Ø–∫—â–æ –æ–Ω–ª–∞–π–Ω, –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –∑ Firestore
    if (checkOnlineStatus()) {
      const userDocRef = doc(db, 'users', userId);
      
      try {
        const userDocSnap = await getDoc(userDocRef);
        
        if (userDocSnap.exists()) {
          // –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
          await updateDoc(userDocRef, {
            completedChallenges: arrayUnion(challengeId),
            lastActivity: new Date()
          });
        } else {
          // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
          const currentChallenges = localCache.completedChallenges.get(userId) || [];
          await setDoc(userDocRef, {
            completedChallenges: currentChallenges,
            createdAt: new Date(),
            lastActivity: new Date()
          });
        }
        
        console.log('‚úÖ –ß–µ–ª–µ–Ω–¥–∂ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ Firestore');
      } catch (firestoreError) {
        console.log('üì± –ß–µ–ª–µ–Ω–¥–∂ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ, —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ');
        // –î–æ–¥–∞—î–º–æ –¥–æ —á–µ—Ä–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
        addToSyncQueue('addChallenge', { userId, challengeId });
      }
    } else {
      console.log('üì± –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: —á–µ–ª–µ–Ω–¥–∂ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ');
      // –î–æ–¥–∞—î–º–æ –¥–æ —á–µ—Ä–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
      addToSyncQueue('addChallenge', { userId, challengeId });
    }
    
    return true;
  } catch (error) {
    console.error('Error adding completed challenge:', error);
    throw error;
  }
};

// –í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–∏–π —á–µ–ª–µ–Ω–¥–∂ –∑—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const removeCompletedChallenge = async (userId, challengeId) => {
  try {
    if (!userId || !challengeId) {
      throw new Error('User ID and Challenge ID are required');
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–µ—à
    const currentChallenges = localCache.completedChallenges.get(userId) || [];
    const updatedChallenges = currentChallenges.filter(id => id !== challengeId);
    localCache.completedChallenges.set(userId, updatedChallenges);
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
    const cacheKey = `completedChallenges_${userId}`;
    saveToLocalStorage(cacheKey, updatedChallenges);

    // –Ø–∫—â–æ –æ–Ω–ª–∞–π–Ω, –æ–Ω–æ–≤–ª—é—î–º–æ Firestore
    if (checkOnlineStatus()) {
      try {
        const userDocRef = doc(db, 'users', userId);
        await updateDoc(userDocRef, {
          completedChallenges: arrayRemove(challengeId),
          lastActivity: new Date()
        });
        console.log('‚úÖ –ß–µ–ª–µ–Ω–¥–∂ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ Firestore');
      } catch (firestoreError) {
        console.log('üì± –ß–µ–ª–µ–Ω–¥–∂ –≤–∏–¥–∞–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ, —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ');
        addToSyncQueue('removeChallenge', { userId, challengeId });
      }
    } else {
      console.log('üì± –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: —á–µ–ª–µ–Ω–¥–∂ –≤–∏–¥–∞–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ');
      addToSyncQueue('removeChallenge', { userId, challengeId });
    }
    
    return true;
  } catch (error) {
    console.error('Error removing completed challenge:', error);
    throw error;
  }
};

// –ß–µ—Ä–≥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–ª—è –æ—Ñ–ª–∞–π–Ω –æ–ø–µ—Ä–∞—Ü—ñ–π
const syncQueue = getFromLocalStorage('firestore_sync_queue', []);

// –î–æ–¥–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é –¥–æ —á–µ—Ä–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
const addToSyncQueue = (operation, data) => {
  const queueItem = {
    id: Date.now() + Math.random(),
    operation,
    data,
    timestamp: new Date().toISOString()
  };
  
  syncQueue.push(queueItem);
  saveToLocalStorage('firestore_sync_queue', syncQueue);
};

// –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ —á–µ—Ä–≥—É –∑ Firestore
export const syncOfflineChanges = async () => {
  if (!checkOnlineStatus() || syncQueue.length === 0) {
    return;
  }

  console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è ${syncQueue.length} –æ—Ñ–ª–∞–π–Ω –æ–ø–µ—Ä–∞—Ü—ñ–π...`);
  
  const processedItems = [];
  
  for (const item of syncQueue) {
    try {
      switch (item.operation) {
        case 'addChallenge':
          const { userId: addUserId, challengeId: addChallengeId } = item.data;
          const userDocRef = doc(db, 'users', addUserId);
          await updateDoc(userDocRef, {
            completedChallenges: arrayUnion(addChallengeId),
            lastActivity: new Date()
          });
          break;
          
        case 'removeChallenge':
          const { userId: removeUserId, challengeId: removeChallengeId } = item.data;
          const removeUserDocRef = doc(db, 'users', removeUserId);
          await updateDoc(removeUserDocRef, {
            completedChallenges: arrayRemove(removeChallengeId),
            lastActivity: new Date()
          });
          break;
      }
      
      processedItems.push(item.id);
      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ: ${item.operation}`);
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó ${item.operation}:`, error);
    }
  }
  
  // –í–∏–¥–∞–ª—è—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ —á–µ—Ä–≥–∏
  const updatedQueue = syncQueue.filter(item => !processedItems.includes(item.id));
  syncQueue.length = 0;
  syncQueue.push(...updatedQueue);
  saveToLocalStorage('firestore_sync_queue', syncQueue);
  
  console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤ —á–µ—Ä–∑—ñ: ${syncQueue.length}`);
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –æ–Ω–ª–∞–π–Ω
window.addEventListener('online', () => {
  setTimeout(() => {
    syncOfflineChanges();
  }, 3000); // –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó –∑'—î–¥–Ω–∞–Ω–Ω—è
});

// –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const getUserProfile = async (userId) => {
  try {
    if (!userId) {
      throw new Error('User ID is required');
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–µ—à
    if (localCache.userProfiles.has(userId)) {
      return localCache.userProfiles.get(userId);
    }

    const userDocRef = doc(db, 'users', userId);
    let userDocSnap;
    
    try {
      if (checkOnlineStatus()) {
        userDocSnap = await getDocFromServer(userDocRef);
      } else {
        userDocSnap = await getDocFromCache(userDocRef);
      }
    } catch (error) {
      // –§–æ–ª–±–µ–∫ –Ω–∞ localStorage
      const cacheKey = `userProfile_${userId}`;
      const cachedProfile = getFromLocalStorage(cacheKey);
      if (cachedProfile) {
        localCache.userProfiles.set(userId, cachedProfile);
        return cachedProfile;
      }
      throw error;
    }
    
    if (userDocSnap.exists()) {
      const profile = userDocSnap.data();
      localCache.userProfiles.set(userId, profile);
      saveToLocalStorage(`userProfile_${userId}`, profile);
      return profile;
    } else {
      // –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
      const newProfile = {
        completedChallenges: [],
        createdAt: new Date(),
        lastActivity: new Date(),
        preferences: {
          favoriteCategories: [],
          preferredDifficulty: 'medium'
        }
      };
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ
      localCache.userProfiles.set(userId, newProfile);
      saveToLocalStorage(`userProfile_${userId}`, newProfile);
      
      // –Ø–∫—â–æ –æ–Ω–ª–∞–π–Ω, —Å—Ç–≤–æ—Ä—é—î–º–æ –≤ Firestore
      if (checkOnlineStatus()) {
        try {
          await setDoc(userDocRef, newProfile);
        } catch (createError) {
          console.log('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –≤ Firestore:', createError);
        }
      }
      
      return newProfile;
    }
  } catch (error) {
    console.error('Error getting user profile:', error);
    
    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    const fallbackProfile = {
      completedChallenges: [],
      createdAt: new Date(),
      lastActivity: new Date(),
      preferences: {
        favoriteCategories: [],
        preferredDifficulty: 'medium'
      }
    };
    
    localCache.userProfiles.set(userId, fallbackProfile);
    return fallbackProfile;
  }
};

// –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const updateUserProfile = async (userId, profileData) => {
  try {
    if (!userId) {
      throw new Error('User ID is required');
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–µ—à
    const currentProfile = localCache.userProfiles.get(userId) || {};
    const updatedProfile = {
      ...currentProfile,
      ...profileData,
      lastActivity: new Date()
    };
    
    localCache.userProfiles.set(userId, updatedProfile);
    saveToLocalStorage(`userProfile_${userId}`, updatedProfile);

    // –Ø–∫—â–æ –æ–Ω–ª–∞–π–Ω, –æ–Ω–æ–≤–ª—é—î–º–æ Firestore
    if (checkOnlineStatus()) {
      try {
        const userDocRef = doc(db, 'users', userId);
        await updateDoc(userDocRef, {
          ...profileData,
          lastActivity: new Date()
        });
        console.log('‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ Firestore');
      } catch (firestoreError) {
        console.log('üì± –ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ, —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ');
        addToSyncQueue('updateProfile', { userId, profileData });
      }
    } else {
      console.log('üì± –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: –ø—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ');
      addToSyncQueue('updateProfile', { userId, profileData });
    }
    
    return true;
  } catch (error) {
    console.error('Error updating user profile:', error);
    throw error;
  }
};

// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Firestore
export const checkFirestoreConnection = async () => {
  try {
    if (!checkOnlineStatus()) {
      return false;
    }
    
    // –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç
    const testDocRef = doc(db, 'test', 'connection');
    await getDocFromServer(testDocRef);
    return true;
  } catch (error) {
    console.log('Firestore connection error:', error);
    return false;
  }
};

// –£–≤—ñ–º–∫–Ω—É—Ç–∏ –º–µ—Ä–µ–∂—É Firestore
export const enableFirestoreNetwork = async () => {
  try {
    await enableNetwork(db);
    console.log('Firestore network enabled');
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –ø—ñ—Å–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –º–µ—Ä–µ–∂—ñ
    setTimeout(() => syncOfflineChanges(), 2000);
    return true;
  } catch (error) {
    console.error('Error enabling Firestore network:', error);
    return false;
  }
};

// –í–∏–º–∫–Ω—É—Ç–∏ –º–µ—Ä–µ–∂—É Firestore
export const disableFirestoreNetwork = async () => {
  try {
    await disableNetwork(db);
    console.log('Firestore network disabled');
    return true;
  } catch (error) {
    console.error('Error disabling Firestore network:', error);
    return false;
  }
};

// –û—á–∏—Å—Ç–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–µ—à (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
export const clearLocalCache = () => {
  localCache.completedChallenges.clear();
  localCache.userProfiles.clear();
  localStorage.removeItem('firestore_sync_queue');
  console.log('üßπ –õ–æ–∫–∞–ª—å–Ω–∏–π –∫–µ—à –æ—á–∏—â–µ–Ω–æ');
};