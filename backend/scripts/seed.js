require('dotenv').config();
const mongoose = require('mongoose');
const { Category, Challenge, User } = require('../models');

const seedData = async () => {
  try {
    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/random-challenge');
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω reset
    const reset = process.argv.includes('--reset');
    
    if (reset) {
      console.log('üóëÔ∏è  –û—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...');
      await Promise.all([
        Category.deleteMany({}),
        Challenge.deleteMany({}),
        User.deleteMany({})
      ]);
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –æ—á–∏—â–µ–Ω–∞');
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î –¥–∞–Ω—ñ
    const categoryCount = await Category.countDocuments();
    if (categoryCount > 0 && !reset) {
      console.log('‚ÑπÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≤–∂–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ --reset –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è');
      process.exit(0);
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    console.log('üìÅ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...');
    const categories = await Category.insertMany([
      {
        name: '–ê–∫—Ç–∏–≤–Ω—ñ',
        emoji: 'üèÉ',
        color: '#ff6b6b',
        description: '–§—ñ–∑–∏—á–Ω—ñ –≤–ø—Ä–∞–≤–∏ —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ'
      },
      {
        name: '–¢–≤–æ—Ä—á—ñ',
        emoji: 'üé®',
        color: '#9c88ff',
        description: '–¢–≤–æ—Ä—á—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –º–∏—Å—Ç–µ—Ü—Ç–≤–æ'
      },
      {
        name: '–°–æ—Ü—ñ–∞–ª—å–Ω—ñ',
        emoji: 'üë•',
        color: '#4ecdc4',
        description: '–í–∑–∞—î–º–æ–¥—ñ—è –∑ –ª—é–¥—å–º–∏'
      },
      {
        name: '–î–æ–º–∞—à–Ω—ñ',
        emoji: 'üè†',
        color: '#45b7d1',
        description: '–î–æ–º–∞—à–Ω—ñ —Å–ø—Ä–∞–≤–∏ —Ç–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è'
      },
      {
        name: '–£—Å–≤—ñ–¥–æ–º–ª–µ–Ω—ñ',
        emoji: 'üßò',
        color: '#96ceb4',
        description: '–ú–µ–¥–∏—Ç–∞—Ü—ñ—è —Ç–∞ —É—Å–≤—ñ–¥–æ–º–ª–µ–Ω—ñ—Å—Ç—å'
      },
      {
        name: '–û—Å–≤—ñ—Ç–Ω—ñ',
        emoji: 'üìö',
        color: '#f9ca24',
        description: '–ù–∞–≤—á–∞–Ω–Ω—è —Ç–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫'
      },
      {
        name: '–ö—É–ª—ñ–Ω–∞—Ä–Ω—ñ',
        emoji: 'üç≥',
        color: '#ff7979',
        description: '–ì–æ—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —ó–∂–∞'
      },
      {
        name: '–ü—Ä–∏—Ä–æ–¥–∞',
        emoji: 'üåø',
        color: '#6ab04c',
        description: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –Ω–∞ –ø—Ä–∏—Ä–æ–¥—ñ'
      }
    ]);
    console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π`);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∏–∫–ª–∏–∫–∏
    console.log('üéØ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏–∫–ª–∏–∫—ñ–≤...');
    const challengesData = [
      // –ê–∫—Ç–∏–≤–Ω—ñ
      { text: '–ü—Ä–æ–π–¥—ñ—Ç—å—Å—è –Ω–∞ —Å–≤—ñ–∂–æ–º—É –ø–æ–≤—ñ—Ç—Ä—ñ 15 —Ö–≤–∏–ª–∏–Ω', categoryId: categories[0]._id, difficulty: 'easy', timeEstimate: 15, tags: ['–ø—Ä–æ–≥—É–ª—è–Ω–∫–∞', '–∑–¥–æ—Ä–æ–≤\'—è'] },
      { text: '–ó—Ä–æ–±—ñ—Ç—å 20 –ø—Ä–∏—Å—ñ–¥–∞–Ω—å', categoryId: categories[0]._id, difficulty: 'medium', timeEstimate: 5, tags: ['–≤–ø—Ä–∞–≤–∏', '—Ñ—ñ—Ç–Ω–µ—Å'] },
      { text: '–ü–æ—Ç–∞–Ω—Ü—é–π—Ç–µ –ø—ñ–¥ 3 —É–ª—é–±–ª–µ–Ω—ñ –ø—ñ—Å–Ω—ñ', categoryId: categories[0]._id, difficulty: 'easy', timeEstimate: 10, tags: ['—Ç–∞–Ω—Ü—ñ', '–≤–µ—Å–µ–ª–æ'] },
      { text: '–ó—Ä–æ–±—ñ—Ç—å –ø–ª–∞–Ω–∫—É 1 —Ö–≤–∏–ª–∏–Ω—É', categoryId: categories[0]._id, difficulty: 'hard', timeEstimate: 2, tags: ['–≤–ø—Ä–∞–≤–∏', '—Å–∏–ª–∞'] },
      { text: '–ü—Ä–æ–±—ñ–∂—ñ—Ç—å 2 –∫–º', categoryId: categories[0]._id, difficulty: 'hard', timeEstimate: 20, tags: ['–±—ñ–≥', '–∫–∞—Ä–¥—ñ–æ'] },
      
      // –¢–≤–æ—Ä—á—ñ
      { text: '–ù–∞–º–∞–ª—é–π—Ç–µ —â–æ—Å—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ª–∏—à–µ 3 –∫–æ–ª—å–æ—Ä–∏', categoryId: categories[1]._id, difficulty: 'medium', timeEstimate: 30, tags: ['–º–∞–ª—é–≤–∞–Ω–Ω—è', '—Ç–≤–æ—Ä—á—ñ—Å—Ç—å'] },
      { text: '–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –≤—ñ—Ä—à –ø—Ä–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥–µ–Ω—å', categoryId: categories[1]._id, difficulty: 'medium', timeEstimate: 15, tags: ['–ø–∏—Å—å–º–æ', '–ø–æ–µ–∑—ñ—è'] },
      { text: '–ó—Ä–æ–±—ñ—Ç—å 5 —Ñ–æ—Ç–æ –Ω–∞ –æ–¥–Ω—É —Ç–µ–º—É', categoryId: categories[1]._id, difficulty: 'easy', timeEstimate: 20, tags: ['—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è', '—Ç–≤–æ—Ä—á—ñ—Å—Ç—å'] },
      { text: '–°—Ç–≤–æ—Ä—ñ—Ç—å –æ—Ä–∏–≥–∞–º—ñ –∑ –ø–∞–ø–µ—Ä—É', categoryId: categories[1]._id, difficulty: 'hard', timeEstimate: 45, tags: ['—Ä—É–∫–æ–¥—ñ–ª–ª—è', '–ø–∞–ø—ñ—Ä'] },
      { text: '–ü—Ä–∏–¥—É–º–∞–π—Ç–µ —Ç–∞ –∑–∞—Å–ø—ñ–≤–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫—É –ø—ñ—Å–Ω—é', categoryId: categories[1]._id, difficulty: 'medium', timeEstimate: 10, tags: ['–º—É–∑–∏–∫–∞', '—Å–ø—ñ–≤'] },
      
      // –°–æ—Ü—ñ–∞–ª—å–Ω—ñ
      { text: '–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–º—É –¥—Ä—É–≥—É', categoryId: categories[2]._id, difficulty: 'easy', timeEstimate: 10, tags: ['—Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è', '–¥—Ä—É–∑—ñ'] },
      { text: '–ü–æ–¥–∑–≤–æ–Ω—ñ—Ç—å —Ä—ñ–¥–Ω–∏–º —Ç–∞ –ø–æ–≥–æ–≤–æ—Ä—ñ—Ç—å 10 —Ö–≤–∏–ª–∏–Ω', categoryId: categories[2]._id, difficulty: 'easy', timeEstimate: 15, tags: ['—Ä–æ–¥–∏–Ω–∞', '—Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è'] },
      { text: '–ó—Ä–æ–±—ñ—Ç—å –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç 3 —Ä—ñ–∑–Ω–∏–º –ª—é–¥—è–º', categoryId: categories[2]._id, difficulty: 'medium', timeEstimate: 30, tags: ['–¥–æ–±—Ä–æ—Ç–∞', '—Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è'] },
      { text: '–ü–æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—è –∑ –Ω–æ–≤–æ—é –ª—é–¥–∏–Ω–æ—é', categoryId: categories[2]._id, difficulty: 'hard', timeEstimate: 20, tags: ['–∑–Ω–∞–π–æ–º—Å—Ç–≤–∞', '—Å–º—ñ–ª–∏–≤—ñ—Å—Ç—å'] },
      { text: '–û—Ä–≥–∞–Ω—ñ–∑—É–π—Ç–µ —Å–ø—ñ–ª—å–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑ –¥—Ä—É–∑—è–º–∏', categoryId: categories[2]._id, difficulty: 'medium', timeEstimate: 60, tags: ['–¥—Ä—É–∑—ñ', '–ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è'] },
      
      // –î–æ–º–∞—à–Ω—ñ
      { text: '–ü—Ä–∏–±—Ä–∞–π—Ç–µ —Ä–æ–±–æ—á–∏–π —Å—Ç—ñ–ª', categoryId: categories[3]._id, difficulty: 'easy', timeEstimate: 15, tags: ['–ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è', '–æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è'] },
      { text: '–ü—Ä–∏–≥–æ—Ç—É–π—Ç–µ –Ω–æ–≤–∏–π —Ä–µ—Ü–µ–ø—Ç', categoryId: categories[3]._id, difficulty: 'medium', timeEstimate: 60, tags: ['–≥–æ—Ç—É–≤–∞–Ω–Ω—è', '–∫—É—Ö–Ω—è'] },
      { text: '–ü–æ–ª–∏–π—Ç–µ –≤—Å—ñ —Ä–æ—Å–ª–∏–Ω–∏ —Ç–∞ –ø–æ–≥–æ–≤–æ—Ä—ñ—Ç—å –∑ –Ω–∏–º–∏', categoryId: categories[3]._id, difficulty: 'easy', timeEstimate: 10, tags: ['—Ä–æ—Å–ª–∏–Ω–∏', '–¥–æ–≥–ª—è–¥'] },
      { text: '–†–µ–æ—Ä–≥–∞–Ω—ñ–∑—É–π—Ç–µ –æ–¥–Ω—É —à–∞—Ñ—É –∞–±–æ —è—â–∏–∫', categoryId: categories[3]._id, difficulty: 'hard', timeEstimate: 45, tags: ['–æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è', '–ø–æ—Ä—è–¥–æ–∫'] },
      { text: '–ü–æ–º–∏–π—Ç–µ –≤—Å—ñ –≤—ñ–∫–Ω–∞ –≤ –∫—ñ–º–Ω–∞—Ç—ñ', categoryId: categories[3]._id, difficulty: 'medium', timeEstimate: 30, tags: ['–ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è', '—á–∏—Å—Ç–æ—Ç–∞'] },
      
      // –£—Å–≤—ñ–¥–æ–º–ª–µ–Ω—ñ
      { text: '–ú–µ–¥–∏—Ç—É–π—Ç–µ 10 —Ö–≤–∏–ª–∏–Ω', categoryId: categories[4]._id, difficulty: 'easy', timeEstimate: 10, tags: ['–º–µ–¥–∏—Ç–∞—Ü—ñ—è', '—Å–ø–æ–∫—ñ–π'] },
      { text: '–ó–∞–ø–∏—à—ñ—Ç—å 5 —Ä–µ—á–µ–π –∑–∞ —è–∫—ñ –≤–∏ –≤–¥—è—á–Ω—ñ', categoryId: categories[4]._id, difficulty: 'easy', timeEstimate: 10, tags: ['–≤–¥—è—á–Ω—ñ—Å—Ç—å', '—Ä–µ—Ñ–ª–µ–∫—Å—ñ—è'] },
      { text: '–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –≥–ª–∏–±–æ–∫–µ –¥–∏—Ö–∞–Ω–Ω—è 5 —Ö–≤–∏–ª–∏–Ω', categoryId: categories[4]._id, difficulty: 'medium', timeEstimate: 5, tags: ['–¥–∏—Ö–∞–Ω–Ω—è', '—Ä–µ–ª–∞–∫—Å–∞—Ü—ñ—è'] },
      { text: '–ü—Ä–æ–≤–µ–¥—ñ—Ç—å 30 —Ö–≤–∏–ª–∏–Ω –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–∞ –≥–∞–¥–∂–µ—Ç—ñ–≤', categoryId: categories[4]._id, difficulty: 'hard', timeEstimate: 30, tags: ['–¥–µ—Ç–æ–∫—Å', '—É—Å–≤—ñ–¥–æ–º–ª–µ–Ω—ñ—Å—Ç—å'] },
      { text: '–í–µ–¥—ñ—Ç—å —â–æ–¥–µ–Ω–Ω–∏–∫ –ø—Ä–æ—Ç—è–≥–æ–º 15 —Ö–≤–∏–ª–∏–Ω', categoryId: categories[4]._id, difficulty: 'medium', timeEstimate: 15, tags: ['–ø–∏—Å—å–º–æ', '—Ä–µ—Ñ–ª–µ–∫—Å—ñ—è'] },
      
      // –û—Å–≤—ñ—Ç–Ω—ñ
      { text: '–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ 20 —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –∫–Ω–∏–≥–∏', categoryId: categories[5]._id, difficulty: 'medium', timeEstimate: 30, tags: ['—á–∏—Ç–∞–Ω–Ω—è', '–∑–Ω–∞–Ω–Ω—è'] },
      { text: '–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –æ—Å–≤—ñ—Ç–Ω—î –≤—ñ–¥–µ–æ –Ω–∞ YouTube', categoryId: categories[5]._id, difficulty: 'easy', timeEstimate: 20, tags: ['–Ω–∞–≤—á–∞–Ω–Ω—è', '–≤—ñ–¥–µ–æ'] },
      { text: '–í–∏–≤—á—ñ—Ç—å 10 –Ω–æ–≤–∏—Ö —Å–ª—ñ–≤ —ñ–Ω–æ–∑–µ–º–Ω–æ—é –º–æ–≤–æ—é', categoryId: categories[5]._id, difficulty: 'medium', timeEstimate: 30, tags: ['–º–æ–≤–∏', '–Ω–∞–≤—á–∞–Ω–Ω—è'] },
      { text: '–†–æ–∑–≤\'—è–∂—ñ—Ç—å –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É –∞–±–æ –∫—Ä–æ—Å–≤–æ—Ä–¥', categoryId: categories[5]._id, difficulty: 'medium', timeEstimate: 20, tags: ['–ª–æ–≥—ñ–∫–∞', '–º–æ–∑–æ–∫'] },
      { text: '–ù–∞–≤—á—ñ—Ç—å –∫–æ–≥–æ—Å—å —á–æ–º—É—Å—å –Ω–æ–≤–æ–º—É', categoryId: categories[5]._id, difficulty: 'hard', timeEstimate: 30, tags: ['–Ω–∞–≤—á–∞–Ω–Ω—è', '–¥—ñ–ª–∏—Ç–∏—Å—è'] },
      
      // –ö—É–ª—ñ–Ω–∞—Ä–Ω—ñ
      { text: '–ü—Ä–∏–≥–æ—Ç—É–π—Ç–µ –∑–¥–æ—Ä–æ–≤–∏–π —Å–Ω—ñ–¥–∞–Ω–æ–∫', categoryId: categories[6]._id, difficulty: 'easy', timeEstimate: 20, tags: ['–≥–æ—Ç—É–≤–∞–Ω–Ω—è', '–∑–¥–æ—Ä–æ–≤\'—è'] },
      { text: '–°–ø–µ—á—ñ—Ç—å —â–æ—Å—å —Å–æ–ª–æ–¥–∫–µ', categoryId: categories[6]._id, difficulty: 'medium', timeEstimate: 60, tags: ['–≤–∏–ø—ñ—á–∫–∞', '–¥–µ—Å–µ—Ä—Ç'] },
      { text: '–ó—Ä–æ–±—ñ—Ç—å —Å–≤—ñ–∂–∏–π —Å—ñ–∫ –∞–±–æ —Å–º—É–∑—ñ', categoryId: categories[6]._id, difficulty: 'easy', timeEstimate: 10, tags: ['–Ω–∞–ø–æ—ó', '–∑–¥–æ—Ä–æ–≤\'—è'] },
      { text: '–ü—Ä–∏–≥–æ—Ç—É–π—Ç–µ —Å—Ç—Ä–∞–≤—É –∑ 5 —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤', categoryId: categories[6]._id, difficulty: 'medium', timeEstimate: 30, tags: ['–≥–æ—Ç—É–≤–∞–Ω–Ω—è', '–ø—Ä–æ—Å—Ç–æ—Ç–∞'] },
      { text: '–°—Ç–≤–æ—Ä—ñ—Ç—å –≤–ª–∞—Å–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç', categoryId: categories[6]._id, difficulty: 'hard', timeEstimate: 60, tags: ['—Ç–≤–æ—Ä—á—ñ—Å—Ç—å', '–∫—É—Ö–Ω—è'] },
      
      // –ü—Ä–∏—Ä–æ–¥–∞
      { text: '–ü–æ—Å–∞–¥—ñ—Ç—å —Ä–æ—Å–ª–∏–Ω—É –∞–±–æ –∫–≤—ñ—Ç–∫—É', categoryId: categories[7]._id, difficulty: 'medium', timeEstimate: 30, tags: ['—Å–∞–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ', '—Ä–æ—Å–ª–∏–Ω–∏'] },
      { text: '–°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞–π—Ç–µ –∑–∞ —Ö–º–∞—Ä–∞–º–∏ 10 —Ö–≤–∏–ª–∏–Ω', categoryId: categories[7]._id, difficulty: 'easy', timeEstimate: 10, tags: ['—Ä–µ–ª–∞–∫—Å', '–ø—Ä–∏—Ä–æ–¥–∞'] },
      { text: '–ó–±–µ—Ä—ñ—Ç—å –±—É–∫–µ—Ç –ø–æ–ª—å–æ–≤–∏—Ö –∫–≤—ñ—Ç—ñ–≤', categoryId: categories[7]._id, difficulty: 'easy', timeEstimate: 20, tags: ['–∫–≤—ñ—Ç–∏', '–ø—Ä–æ–≥—É–ª—è–Ω–∫–∞'] },
      { text: '–í–ª–∞—à—Ç—É–π—Ç–µ –ø—ñ–∫–Ω—ñ–∫ –Ω–∞ –ø—Ä–∏—Ä–æ–¥—ñ', categoryId: categories[7]._id, difficulty: 'hard', timeEstimate: 120, tags: ['–≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫', '—ó–∂–∞'] },
      { text: '–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É–π—Ç–µ —Å—Ö—ñ–¥ –∞–±–æ –∑–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è', categoryId: categories[7]._id, difficulty: 'medium', timeEstimate: 30, tags: ['—Ñ–æ—Ç–æ', '–∫—Ä–∞—Å–∞'] }
    ];
    
    const challenges = await Challenge.insertMany(challengesData);
    console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ ${challenges.length} –≤–∏–∫–ª–∏–∫—ñ–≤`);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    console.log('üë§ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...');
    const users = await User.create([
      {
        username: 'admin',
        email: 'admin@example.com',
        password: 'Admin123',
        name: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä',
        role: 'admin',
        emailVerified: true
      },
      {
        username: 'testuser',
        email: 'test@example.com',
        password: 'Test123',
        name: '–¢–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á',
        role: 'user',
        emailVerified: true
      }
    ]);
    console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ ${users.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);
    
    console.log('\nüìä –ü—ñ–¥—Å—É–º–æ–∫:');
    console.log(`- –ö–∞—Ç–µ–≥–æ—Ä—ñ–π: ${categories.length}`);
    console.log(`- –í–∏–∫–ª–∏–∫—ñ–≤: ${challenges.length}`);
    console.log(`- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${users.length}`);
    console.log('\n‚ú® Seed –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    
    console.log('\nüîë –¢–µ—Å—Ç–æ–≤—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –∑–∞–ø–∏—Å–∏:');
    console.log('Admin: admin@example.com / Admin123');
    console.log('User: test@example.com / Test123');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
    process.exit(1);
  } finally {
    await mongoose.connection.close();
    console.log('\nüëã –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î –∑–∞–∫—Ä–∏—Ç–æ');
    process.exit(0);
  }
};

// –ó–∞–ø—É—Å–∫–∞—î–º–æ seed
seedData();