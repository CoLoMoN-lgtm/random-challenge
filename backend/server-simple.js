const express = require('express');
const cors = require('cors');

const app = express();

// Middleware
app.use(express.json());
app.use(cors({
  origin: '*',
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type']
}));

// In-memory data storage
let categories = [];
let challenges = [];
let nextCategoryId = 1;
let nextChallengeId = 1;

// Helper function to generate IDs
function generateId(type) {
  if (type === 'category') {
    return `cat_${nextCategoryId++}`;
  }
  return `chl_${nextChallengeId++}`;
}

// Initialize data
function seedData() {
  console.log('–°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ...');
  
  // Create categories
  categories = [
    { _id: generateId('category'), name: '–ê–∫—Ç–∏–≤–Ω—ñ', emoji: 'üèÉ', color: '#ff6b6b' },
    { _id: generateId('category'), name: '–¢–≤–æ—Ä—á—ñ', emoji: 'üé®', color: '#9c88ff' },
    { _id: generateId('category'), name: '–°–æ—Ü—ñ–∞–ª—å–Ω—ñ', emoji: 'üë•', color: '#4ecdc4' },
    { _id: generateId('category'), name: '–î–æ–º–∞—à–Ω—ñ', emoji: 'üè†', color: '#45b7d1' },
    { _id: generateId('category'), name: '–£—Å–≤—ñ–¥–æ–º–ª–µ–Ω—ñ', emoji: 'üßò', color: '#96ceb4' }
  ];
  
  console.log('–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ:', categories.length);
  
  // Create challenges
  challenges = [
    // –ê–∫—Ç–∏–≤–Ω—ñ
    { _id: generateId('challenge'), text: '–ü—Ä–æ–π–¥—ñ—Ç—å—Å—è –Ω–∞ —Å–≤—ñ–∂–æ–º—É –ø–æ–≤—ñ—Ç—Ä—ñ 15 —Ö–≤–∏–ª–∏–Ω', categoryId: categories[0]._id, difficulty: 'easy', createdAt: new Date() },
    { _id: generateId('challenge'), text: '–ó—Ä–æ–±—ñ—Ç—å 10 –ø—Ä–∏—Å—ñ–¥–∞–Ω—å', categoryId: categories[0]._id, difficulty: 'medium', createdAt: new Date() },
    { _id: generateId('challenge'), text: '–ü–æ—Ç–∞–Ω—Ü—é–π—Ç–µ –ø—ñ–¥ —É–ª—é–±–ª–µ–Ω—É –ø—ñ—Å–Ω—é', categoryId: categories[0]._id, difficulty: 'easy', createdAt: new Date() },
    { _id: generateId('challenge'), text: '–ó—Ä–æ–±—ñ—Ç—å –ø–ª–∞–Ω–∫—É 30 —Å–µ–∫—É–Ω–¥', categoryId: categories[0]._id, difficulty: 'hard', createdAt: new Date() },
    
    // –¢–≤–æ—Ä—á—ñ
    { _id: generateId('challenge'), text: '–ù–∞–º–∞–ª—é–π—Ç–µ —â–æ—Å—å 3 –∫–æ–ª—å–æ—Ä–∞–º–∏', categoryId: categories[1]._id, difficulty: 'medium', createdAt: new Date() },
    { _id: generateId('challenge'), text: '–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –≤—ñ—Ä—à', categoryId: categories[1]._id, difficulty: 'medium', createdAt: new Date() },
    { _id: generateId('challenge'), text: '–ó—Ä–æ–±—ñ—Ç—å —Ñ–æ—Ç–æ —á–æ–≥–æ—Å—å –Ω–µ–∑–≤–∏—á–∞–π–Ω–æ–≥–æ', categoryId: categories[1]._id, difficulty: 'easy', createdAt: new Date() },
    { _id: generateId('challenge'), text: '–°—Ç–≤–æ—Ä—ñ—Ç—å –æ—Ä–∏–≥–∞–º—ñ', categoryId: categories[1]._id, difficulty: 'hard', createdAt: new Date() },
    
    // –°–æ—Ü—ñ–∞–ª—å–Ω—ñ
    { _id: generateId('challenge'), text: '–ù–∞–ø–∏—à—ñ—Ç—å —Å—Ç–∞—Ä–æ–º—É –¥—Ä—É–≥—É', categoryId: categories[2]._id, difficulty: 'easy', createdAt: new Date() },
    { _id: generateId('challenge'), text: '–ü–æ–¥–∑–≤–æ–Ω—ñ—Ç—å —Ä—ñ–¥–Ω–∏–º', categoryId: categories[2]._id, difficulty: 'easy', createdAt: new Date() },
    { _id: generateId('challenge'), text: '–ó—Ä–æ–±—ñ—Ç—å –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç', categoryId: categories[2]._id, difficulty: 'medium', createdAt: new Date() },
    { _id: generateId('challenge'), text: '–ü–æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—è –∑ –Ω–æ–≤–æ—é –ª—é–¥–∏–Ω–æ—é', categoryId: categories[2]._id, difficulty: 'hard', createdAt: new Date() },
    
    // –î–æ–º–∞—à–Ω—ñ
    { _id: generateId('challenge'), text: '–ü—Ä–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –ø–æ–ª–∏—Ü—é', categoryId: categories[3]._id, difficulty: 'easy', createdAt: new Date() },
    { _id: generateId('challenge'), text: '–ü—Ä–∏–≥–æ—Ç—É–π—Ç–µ –Ω–æ–≤–∏–π —Ä–µ—Ü–µ–ø—Ç', categoryId: categories[3]._id, difficulty: 'medium', createdAt: new Date() },
    { _id: generateId('challenge'), text: '–ü–æ–ª–∏–π—Ç–µ —Ä–æ—Å–ª–∏–Ω–∏', categoryId: categories[3]._id, difficulty: 'easy', createdAt: new Date() },
    { _id: generateId('challenge'), text: '–†–µ–æ—Ä–≥–∞–Ω—ñ–∑—É–π—Ç–µ —à–∞—Ñ—É', categoryId: categories[3]._id, difficulty: 'hard', createdAt: new Date() },
    
    // –£—Å–≤—ñ–¥–æ–º–ª–µ–Ω—ñ
    { _id: generateId('challenge'), text: '–ú–µ–¥–∏—Ç—É–π—Ç–µ 5 —Ö–≤–∏–ª–∏–Ω', categoryId: categories[4]._id, difficulty: 'easy', createdAt: new Date() },
    { _id: generateId('challenge'), text: '–ó–∞–ø–∏—à—ñ—Ç—å 3 —Ä–µ—á—ñ –∑–∞ —è–∫—ñ –≤–¥—è—á–Ω—ñ', categoryId: categories[4]._id, difficulty: 'easy', createdAt: new Date() },
    { _id: generateId('challenge'), text: '–ì–ª–∏–±–æ–∫–æ –¥–∏—Ö–∞–π—Ç–µ 2 —Ö–≤–∏–ª–∏–Ω–∏', categoryId: categories[4]._id, difficulty: 'medium', createdAt: new Date() },
    { _id: generateId('challenge'), text: '10 —Ö–≤–∏–ª–∏–Ω –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω—É', categoryId: categories[4]._id, difficulty: 'hard', createdAt: new Date() }
  ];
  
  console.log('–í–∏–∫–ª–∏–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ:', challenges.length);
}

// Helper function to populate category data in challenges
function populateChallenge(challenge) {
  const category = categories.find(cat => cat._id === challenge.categoryId);
  return {
    ...challenge,
    categoryId: category || challenge.categoryId
  };
}

// API Routes

// Home
app.get('/', (req, res) => {
  res.json({ 
    message: 'Random Challenge API v1.0 (In-Memory)',
    endpoints: [
      'GET /api/categories',
      'GET /api/challenges',
      'GET /api/challenges/random',
      'POST /api/challenges'
    ]
  });
});

// Get all categories
app.get('/api/categories', (req, res) => {
  res.json(categories);
});

// Get all challenges
app.get('/api/challenges', (req, res) => {
  const { category } = req.query;
  
  let filteredChallenges = challenges;
  
  if (category && category !== 'all') {
    filteredChallenges = challenges.filter(ch => ch.categoryId === category);
  }
  
  // Populate category data
  const populatedChallenges = filteredChallenges.map(populateChallenge);
  
  res.json(populatedChallenges);
});

// Get random challenge
app.get('/api/challenges/random', (req, res) => {
  const { category } = req.query;
  
  let filteredChallenges = challenges;
  
  if (category && category !== 'all') {
    filteredChallenges = challenges.filter(ch => ch.categoryId === category);
  }
  
  if (filteredChallenges.length === 0) {
    return res.status(404).json({ error: '–ù–µ–º–∞—î –≤–∏–∫–ª–∏–∫—ñ–≤' });
  }
  
  const randomIndex = Math.floor(Math.random() * filteredChallenges.length);
  const randomChallenge = populateChallenge(filteredChallenges[randomIndex]);
  
  res.json(randomChallenge);
});

// Add new challenge
app.post('/api/challenges', (req, res) => {
  const { text, categoryId, difficulty } = req.body;
  
  if (!text || !categoryId) {
    return res.status(400).json({ error: 'Text —Ç–∞ categoryId –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ' });
  }
  
  // Check if category exists
  const categoryExists = categories.some(cat => cat._id === categoryId);
  if (!categoryExists) {
    return res.status(400).json({ error: '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  const newChallenge = {
    _id: generateId('challenge'),
    text,
    categoryId,
    difficulty: difficulty || 'medium',
    createdAt: new Date()
  };
  
  challenges.push(newChallenge);
  
  // Return populated challenge
  const populatedChallenge = populateChallenge(newChallenge);
  res.status(201).json(populatedChallenge);
});

// Get statistics
app.get('/api/stats', (req, res) => {
  const totalChallenges = challenges.length;
  const totalCategories = categories.length;
  
  // Count challenges by category
  const byCategory = categories.map(category => {
    const count = challenges.filter(ch => ch.categoryId === category._id).length;
    return {
      _id: category._id,
      categoryName: category.name,
      count: count
    };
  });
  
  res.json({
    totalChallenges,
    totalCategories,
    byCategory
  });
});

// Start server
const PORT = process.env.PORT || 5000;

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ in-memory –¥–∞–Ω—ñ (–±–µ–∑ MongoDB)');
  seedData();
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\n–°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ');
  process.exit(0);
});